{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\trello-clone-mern\\\\client\\\\src\\\\Components\\\\Pages\\\\BoardsPage\\\\Boards.js\",\n    _s = $RefreshSig$();\n\nimport LoadingScreen from \"../../LoadingScreen\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBoards } from \"../../../Services/boardsService\";\nimport Navbar from \"../../Navbar\";\nimport { Container, Wrapper, Title, Board, AddBoard } from \"./Styled\";\nimport CreateBoard from \"../../Modals/CreateBoardModal/CreateBoard\";\nimport { useHistory } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Boards = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    pending,\n    boardsData\n  } = useSelector(state => state.boards);\n  const [openModal, setOpenModal] = useState(false);\n  const [searchString, setSearchString] = useState('');\n\n  const handleModalClose = () => {\n    setOpenModal(false);\n  };\n\n  const handleClick = e => {\n    history.push(`/board/${e.target.id}`);\n  };\n\n  useEffect(() => {\n    getBoards(false, dispatch);\n  }, [dispatch]);\n  useEffect(() => {\n    document.title = \"Boards | Trello Clone\";\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [pending && /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        searchString: searchString,\n        setSearchString: setSearchString\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: \"Your Boards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), !pending && boardsData.length > 0 && boardsData.filter(item => searchString ? item.title.toLowerCase().includes(searchString.toLowerCase()) : true).map(item => {\n          return /*#__PURE__*/_jsxDEV(Board, {\n            link: item.backgroundImageLink,\n            isImage: item.isImage,\n            id: item._id,\n            onClick: e => handleClick(e),\n            children: item.title\n          }, item._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this);\n        }), !pending && /*#__PURE__*/_jsxDEV(AddBoard, {\n          onClick: () => setOpenModal(true),\n          children: \"Create new board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), openModal && /*#__PURE__*/_jsxDEV(CreateBoard, {\n          callback: handleModalClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Boards, \"z6jlM7IFX675ol7u5khLUmDgflM=\", false, function () {\n  return [useDispatch, useHistory, useSelector];\n});\n\n_c = Boards;\nexport default Boards;\n\nvar _c;\n\n$RefreshReg$(_c, \"Boards\");","map":{"version":3,"sources":["C:/Users/Dell/trello-clone-mern/client/src/Components/Pages/BoardsPage/Boards.js"],"names":["LoadingScreen","React","useEffect","useState","useDispatch","useSelector","getBoards","Navbar","Container","Wrapper","Title","Board","AddBoard","CreateBoard","useHistory","Boards","dispatch","history","pending","boardsData","state","boards","openModal","setOpenModal","searchString","setSearchString","handleModalClose","handleClick","e","push","target","id","document","title","length","filter","item","toLowerCase","includes","map","backgroundImageLink","isImage","_id"],"mappings":"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","sourcesContent":["import LoadingScreen from \"../../LoadingScreen\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getBoards } from \"../../../Services/boardsService\";\r\nimport Navbar from \"../../Navbar\";\r\nimport { Container, Wrapper, Title, Board, AddBoard } from \"./Styled\";\r\nimport CreateBoard from \"../../Modals/CreateBoardModal/CreateBoard\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Boards = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const { pending, boardsData } = useSelector((state) => state.boards);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [searchString, setSearchString] = useState('');\r\n  const handleModalClose = () => {\r\n    setOpenModal(false);\r\n  };\r\n\r\n  const handleClick = (e) => {\r\n   history.push(`/board/${e.target.id}`)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getBoards(false,dispatch);\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    document.title = \"Boards | Trello Clone\"\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {pending && <LoadingScreen />}\r\n      <Container>        \r\n        <Navbar searchString={searchString} setSearchString={setSearchString} />\r\n        <Wrapper>\r\n          <Title>Your Boards</Title>\r\n          {!pending &&\r\n            boardsData.length>0 &&\r\n            boardsData.filter(item=>searchString?item.title.toLowerCase().includes(searchString.toLowerCase()):true).map((item) => {\r\n              return (\r\n                <Board key={item._id} link={item.backgroundImageLink} isImage={item.isImage} id={item._id} onClick={(e)=>handleClick(e)}>\r\n                  {item.title}\r\n                </Board>\r\n              );\r\n            })}\r\n          {!pending && (\r\n            <AddBoard onClick={() => setOpenModal(true)}>\r\n              Create new board\r\n            </AddBoard>\r\n          )}\r\n          {openModal && <CreateBoard callback={handleModalClose} />}\r\n        </Wrapper>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n"]},"metadata":{},"sourceType":"module"}