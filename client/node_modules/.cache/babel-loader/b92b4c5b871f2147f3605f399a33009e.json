{"ast":null,"code":"import axios from \"axios\";\nimport { openAlert } from \"../Redux/Slices/alertSlice\";\nimport { failFetchingBoards, startFetchingBoards, successFetchingBoards, successCreatingBoard, failCreatingBoard, startCreatingBoard } from \"../Redux/Slices/boardsSlice\";\nimport { addNewBoard } from \"../Redux/Slices/userSlice\";\nimport { setLoading, successFetchingBoard, updateTitle } from \"../Redux/Slices/boardSlice\";\nconst baseUrl = \"http://localhost:5001/board\";\nexport const getBoards = async (fromDropDown, dispatch) => {\n  if (!fromDropDown) dispatch(startFetchingBoards());\n\n  try {\n    const res = await axios.get(baseUrl + \"/\");\n    setTimeout(() => {\n      dispatch(successFetchingBoards({\n        boards: res.data\n      }));\n    }, 1000);\n  } catch (error) {\n    var _error$response, _error$response$data;\n\n    dispatch(failFetchingBoards());\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: \"error\"\n    }));\n  }\n};\nexport const createBoard = async (props, dispatch) => {\n  dispatch(startCreatingBoard());\n\n  if (!(props.title && props.backgroundImageLink)) {\n    dispatch(failCreatingBoard());\n    dispatch(openAlert({\n      message: \"Please enter a title for board!\",\n      severity: \"warning\"\n    }));\n    return;\n  }\n\n  try {\n    const res = await axios.post(baseUrl + \"/create\", props);\n    dispatch(addNewBoard(res.data));\n    dispatch(successCreatingBoard(res.data));\n    dispatch(openAlert({\n      message: `${res.data.title} board has been successfully created`,\n      severity: \"success\"\n    }));\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n\n    dispatch(failCreatingBoard());\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: \"error\"\n    }));\n  }\n};\nexport const getBoard = async (boardId, dispatch) => {\n  dispatch(setLoading(true));\n\n  try {\n    const res = await axios.get(baseUrl + \"/\" + boardId);\n    dispatch(successFetchingBoard(res.data));\n    setTimeout(() => {\n      dispatch(setLoading(false));\n    }, 1000);\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n\n    dispatch(setLoading(false));\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: \"error\"\n    }));\n  }\n};\nexport const boardTitleUpdate = async (title, boardId, dispatch) => {\n  try {\n    dispatch(updateTitle(title));\n    await axios.put(baseUrl + '/' + boardId + '/update-board-title', {\n      title: title\n    });\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: 'error'\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/trello-clone-mern/client/src/Services/boardsService.js"],"names":["axios","openAlert","failFetchingBoards","startFetchingBoards","successFetchingBoards","successCreatingBoard","failCreatingBoard","startCreatingBoard","addNewBoard","setLoading","successFetchingBoard","updateTitle","baseUrl","getBoards","fromDropDown","dispatch","res","get","setTimeout","boards","data","error","message","response","errMessage","severity","createBoard","props","title","backgroundImageLink","post","getBoard","boardId","boardTitleUpdate","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { openAlert } from \"../Redux/Slices/alertSlice\";\r\nimport {\r\n  failFetchingBoards,\r\n  startFetchingBoards,\r\n  successFetchingBoards,\r\n  successCreatingBoard,\r\n  failCreatingBoard,\r\n  startCreatingBoard,\r\n} from \"../Redux/Slices/boardsSlice\";\r\nimport { addNewBoard } from \"../Redux/Slices/userSlice\";\r\nimport {setLoading, successFetchingBoard, updateTitle} from \"../Redux/Slices/boardSlice\";\r\nconst baseUrl = \"http://localhost:5001/board\";\r\n\r\nexport const getBoards = async (fromDropDown,dispatch) => {\r\n  if(!fromDropDown)dispatch(startFetchingBoards());\r\n  try {\r\n    const res = await axios.get(baseUrl + \"/\");\r\n    setTimeout(() => {\r\n      dispatch(successFetchingBoards({ boards: res.data }));\r\n    }, 1000);\r\n  } catch (error) {\r\n    dispatch(failFetchingBoards());\r\n    dispatch(\r\n      openAlert({\r\n        message: error?.response?.data?.errMessage\r\n          ? error.response.data.errMessage\r\n          : error.message,\r\n        severity: \"error\",\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport const createBoard = async (props, dispatch) => {\r\n  dispatch(startCreatingBoard());\r\n  if (!(props.title && props.backgroundImageLink)) {\r\n    dispatch(failCreatingBoard());\r\n    dispatch(\r\n      openAlert({\r\n        message: \"Please enter a title for board!\",\r\n        severity: \"warning\",\r\n      })\r\n    );\r\n    return;\r\n  }\r\n  try {\r\n    const res = await axios.post(baseUrl + \"/create\", props);\r\n    dispatch(addNewBoard(res.data));\r\n    dispatch(successCreatingBoard(res.data));\r\n    dispatch(\r\n      openAlert({\r\n        message: `${res.data.title} board has been successfully created`,\r\n        severity: \"success\",\r\n      })\r\n    );\r\n  } catch (error) {\r\n    dispatch(failCreatingBoard());\r\n    dispatch(\r\n      openAlert({\r\n        message: error?.response?.data?.errMessage\r\n          ? error.response.data.errMessage\r\n          : error.message,\r\n        severity: \"error\",\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport const getBoard = async (boardId,dispatch) => {\r\n  dispatch(setLoading(true));\r\n  try {\r\n    const res = await axios.get(baseUrl + \"/\" + boardId);\r\n      dispatch(successFetchingBoard(res.data));    \r\n    setTimeout(() => {\r\n      dispatch(setLoading(false));      \r\n    }, 1000);\r\n  } catch (error) {\r\n    dispatch(setLoading(false));\r\n    dispatch(\r\n      openAlert({\r\n        message: error?.response?.data?.errMessage\r\n          ? error.response.data.errMessage\r\n          : error.message,\r\n        severity: \"error\",\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport const boardTitleUpdate = async (title, boardId, dispatch) => {\r\n\ttry {\r\n\t\tdispatch(updateTitle(title));\r\n\t\tawait axios.put(baseUrl + '/' + boardId + '/update-board-title', {title:title});\r\n\t} catch (error) {\t\r\n\t\tdispatch(\r\n\t\t\topenAlert({\r\n\t\t\t\tmessage: error?.response?.data?.errMessage ? error.response.data.errMessage : error.message,\r\n\t\t\t\tseverity: 'error',\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\r\n};"]},"metadata":{},"sourceType":"module"}