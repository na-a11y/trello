{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\trello-clone-mern\\\\client\\\\src\\\\Components\\\\Pages\\\\BoardPage\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from '../../Navbar';\nimport React, { useEffect, useState } from 'react';\nimport TopBar from './BoardComponents/TopBar/TopBar';\nimport * as style from './Styled';\nimport AddList from './BoardComponents/AddList/AddList';\nimport List from './BoardComponents/List/List';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getBoard } from '../../../Services/boardsService';\nimport { getLists } from '../../../Services/boardService';\nimport { updateCardOrder, updateListOrder } from '../../../Services/dragAndDropService';\nimport LoadingScreen from '../../LoadingScreen';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Board = props => {\n  _s();\n\n  /* props.match.params.id */\n  const dispatch = useDispatch();\n  const {\n    backgroundImageLink,\n    isImage,\n    loading,\n    title\n  } = useSelector(state => state.board);\n  const {\n    allLists,\n    loadingListService\n  } = useSelector(state => state.list);\n  const [searchString, setSearchString] = useState('');\n  const boardId = props.match.params.id;\n  useEffect(() => {\n    getBoard(props.match.params.id, dispatch);\n    getLists(boardId, dispatch);\n  }, [props.match.params.id, dispatch, boardId]);\n  useEffect(() => {\n    document.title = title + ' | Trello Clone';\n  }, [title]);\n\n  const onDragEnd = async result => {\n    const {\n      draggableId,\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n\n    if (result.type === 'column') {\n      if (source.index === destination.index) return;\n      await updateListOrder({\n        sourceIndex: source.index,\n        destinationIndex: destination.index,\n        listId: draggableId,\n        boardId: boardId,\n        allLists: allLists\n      }, dispatch);\n      return;\n    }\n\n    if (source.droppableId === destination.droppableId && source.index === destination.index) return;\n    await updateCardOrder({\n      sourceId: source.droppableId,\n      destinationId: destination.droppableId,\n      sourceIndex: source.index,\n      destinationIndex: destination.index,\n      cardId: draggableId,\n      boardId: boardId,\n      allLists: allLists\n    }, dispatch);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      searchString: searchString,\n      setSearchString: setSearchString\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(style.Container, {\n      isImage: isImage,\n      bgImage: isImage ? backgroundImageLink.split('?')[0] : backgroundImageLink,\n      children: [/*#__PURE__*/_jsxDEV(TopBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }, this), (loading || loadingListService) && /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n        onDragEnd: onDragEnd,\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"all-columns\",\n          direction: \"horizontal\",\n          type: \"column\",\n          children: (provided, snapshot) => {\n            return /*#__PURE__*/_jsxDEV(style.ListContainer, { ...provided.droppableProps,\n              ref: provided.innerRef,\n              children: [!loading && allLists.map((list, index) => {\n                return /*#__PURE__*/_jsxDEV(List, {\n                  searchString: searchString,\n                  index: index,\n                  info: list,\n                  boardId: boardId\n                }, list._id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 13\n                }, this);\n              }), provided.placeholder, /*#__PURE__*/_jsxDEV(AddList, {\n                boardId: boardId\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 10\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 9\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Board, \"o8yYPCP8wEfQXQ1DGy4C01Zv9po=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Dell/trello-clone-mern/client/src/Components/Pages/BoardPage/Board.js"],"names":["Navbar","React","useEffect","useState","TopBar","style","AddList","List","useDispatch","useSelector","getBoard","getLists","updateCardOrder","updateListOrder","LoadingScreen","DragDropContext","Droppable","Board","props","dispatch","backgroundImageLink","isImage","loading","title","state","board","allLists","loadingListService","list","searchString","setSearchString","boardId","match","params","id","document","onDragEnd","result","draggableId","source","destination","type","index","sourceIndex","destinationIndex","listId","droppableId","sourceId","destinationId","cardId","split","provided","snapshot","droppableProps","innerRef","map","_id","placeholder"],"mappings":"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","sourcesContent":["import Navbar from '../../Navbar';\r\nimport React, { useEffect, useState } from 'react';\r\nimport TopBar from './BoardComponents/TopBar/TopBar';\r\nimport * as style from './Styled';\r\nimport AddList from './BoardComponents/AddList/AddList';\r\nimport List from './BoardComponents/List/List';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getBoard } from '../../../Services/boardsService';\r\nimport { getLists } from '../../../Services/boardService';\r\nimport { updateCardOrder, updateListOrder } from '../../../Services/dragAndDropService';\r\nimport LoadingScreen from '../../LoadingScreen';\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nconst Board = (props) => {\r\n\t/* props.match.params.id */\r\n\tconst dispatch = useDispatch();\r\n\tconst { backgroundImageLink, isImage, loading, title } = useSelector((state) => state.board);\r\n\tconst { allLists, loadingListService } = useSelector((state) => state.list);\r\n\tconst [searchString, setSearchString] = useState('');\r\n\tconst boardId = props.match.params.id;\r\n\tuseEffect(() => {\r\n\t\tgetBoard(props.match.params.id, dispatch);\r\n\t\tgetLists(boardId, dispatch);\r\n\t}, [props.match.params.id, dispatch, boardId]);\r\n\r\n\tuseEffect(() => {\r\n\t\tdocument.title = title + ' | Trello Clone';\r\n\t}, [title]);\r\n\r\n\tconst onDragEnd = async (result) => {\r\n\t\tconst { draggableId, source, destination } = result;\r\n\t\tif (!destination) return;\r\n\t\tif (result.type === 'column') {\r\n\t\t\tif (source.index === destination.index) return;\r\n\t\t\tawait updateListOrder(\r\n\t\t\t\t{\r\n\t\t\t\t\tsourceIndex: source.index,\r\n\t\t\t\t\tdestinationIndex: destination.index,\r\n\t\t\t\t\tlistId: draggableId,\r\n\t\t\t\t\tboardId: boardId,\r\n\t\t\t\t\tallLists: allLists,\r\n\t\t\t\t},\r\n\t\t\t\tdispatch\r\n\t\t\t);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (source.droppableId === destination.droppableId && source.index === destination.index) return;\r\n\t\tawait updateCardOrder(\r\n\t\t\t{\r\n\t\t\t\tsourceId: source.droppableId,\r\n\t\t\t\tdestinationId: destination.droppableId,\r\n\t\t\t\tsourceIndex: source.index,\r\n\t\t\t\tdestinationIndex: destination.index,\r\n\t\t\t\tcardId: draggableId,\r\n\t\t\t\tboardId: boardId,\r\n\t\t\t\tallLists: allLists,\r\n\t\t\t},\r\n\t\t\tdispatch\r\n\t\t);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Navbar searchString={searchString} setSearchString={setSearchString} />\r\n\t\t\t<style.Container\r\n\t\t\t\tisImage={isImage}\r\n\t\t\t\tbgImage={isImage ? backgroundImageLink.split('?')[0] : backgroundImageLink}\r\n\t\t\t>\r\n\t\t\t\t<TopBar />\r\n\t\t\t\t{(loading || loadingListService) && <LoadingScreen />}\r\n\t\t\t\t<DragDropContext onDragEnd={onDragEnd}>\r\n\t\t\t\t\t<Droppable droppableId='all-columns' direction='horizontal' type='column'>\r\n\t\t\t\t\t\t{(provided, snapshot) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<style.ListContainer {...provided.droppableProps} ref={provided.innerRef}>\r\n\t\t\t\t\t\t\t\t\t{!loading &&\r\n\t\t\t\t\t\t\t\t\t\tallLists.map((list, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<List\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tsearchString={searchString}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={list._id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tindex={index}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tinfo={list}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tboardId={boardId}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t{provided.placeholder}\r\n\t\t\t\t\t\t\t\t\t<AddList boardId={boardId} />\r\n\t\t\t\t\t\t\t\t</style.ListContainer>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t</Droppable>\r\n\t\t\t\t</DragDropContext>\r\n\t\t\t</style.Container>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Board;\r\n"]},"metadata":{},"sourceType":"module"}