{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  cardId: '',\n  title: '',\n  labels: [],\n  members: [],\n  watchers: [],\n  activities: [],\n  checklists: [],\n  owner: '',\n  description: '',\n  date: {\n    startDate: null,\n    dueDate: null,\n    dueTime: null,\n    completed: false\n  },\n  attachments: [],\n  cover: {\n    color: null,\n    isSizeOne: null\n  },\n  colors: [{\n    bg: '#61bd4f',\n    hbg: '#519839'\n  }, {\n    bg: '#f2d600',\n    hbg: '#d9b51c'\n  }, {\n    bg: '#ff9f1a',\n    hbg: '#cd8313'\n  }, {\n    bg: '#eb5a46',\n    hbg: '#b04632'\n  }, {\n    bg: '#c377e0',\n    hbg: '#89609e'\n  }, {\n    bg: '#0079bf',\n    hbg: '#055a8c'\n  }, {\n    bg: '#344563',\n    hbg: '#172b4d'\n  }, {\n    bg: '#ff78cb',\n    hbg: '#c75bad'\n  }],\n  pending: false\n};\nconst cardsSlice = createSlice({\n  name: 'card',\n  initialState,\n  reducers: {\n    reset: state => initialState,\n    setPending: (state, action) => {\n      state.pending = action.payload;\n    },\n    setCard: (state, action) => {\n      state.cardId = action.payload._id;\n      state.title = action.payload.title;\n      state.labels = action.payload.labels;\n      state.members = action.payload.members;\n      state.watchers = action.payload.watchers;\n      state.activities = action.payload.activities;\n      state.owner = action.payload.owner;\n      state.listTitle = action.payload.listTitle;\n      state.listId = action.payload.listId;\n      state.boardId = action.payload.boardId;\n      state.description = action.payload.description;\n      state.checklists = action.payload.checklists;\n      state.date = action.payload.date;\n      state.attachments = action.payload.attachments;\n      state.cover = action.payload.cover;\n    },\n    updateTitle: (state, action) => {\n      state.title = action.payload;\n    },\n    updateDescription: (state, action) => {\n      state.description = action.payload;\n    },\n    addComment: (state, action) => {\n      state.activities = action.payload;\n    },\n    updateComment: (state, action) => {\n      const {\n        commentId,\n        text\n      } = action.payload;\n      state.activities = state.activities.map(activity => {\n        if (activity._id === commentId) {\n          activity.text = text;\n        }\n\n        return activity;\n      });\n    },\n    deleteComment: (state, action) => {\n      state.activities = state.activities.filter(act => act._id !== action.payload);\n    },\n    addMember: (state, action) => {\n      const {\n        memberId,\n        memberName,\n        memberColor\n      } = action.payload;\n      state.members.unshift({\n        user: memberId,\n        name: memberName,\n        color: memberColor\n      });\n    },\n    deleteMember: (state, action) => {\n      const {\n        memberId\n      } = action.payload;\n      state.members = state.members.filter(member => member.user !== memberId);\n    },\n    createLabel: (state, action) => {\n      const {\n        _id,\n        text,\n        color,\n        backColor\n      } = action.payload;\n      state.labels.unshift({\n        _id,\n        text,\n        color,\n        backColor,\n        selected: true\n      });\n    },\n    updateLabel: (state, action) => {\n      const {\n        labelId,\n        text,\n        color,\n        backColor\n      } = action.payload;\n      state.labels = state.labels.map(label => {\n        if (label._id === labelId) {\n          label.text = text;\n          label.color = color;\n          label.backColor = backColor;\n        }\n\n        return label;\n      });\n    },\n    deleteLabel: (state, action) => {\n      state.labels = state.labels.filter(label => label._id !== action.payload);\n    },\n    updateLabelSelection: (state, action) => {\n      const {\n        labelId,\n        selected\n      } = action.payload;\n      state.labels = state.labels.map(label => {\n        if (label._id === labelId) {\n          label.selected = selected;\n        }\n\n        return label;\n      });\n    },\n    updateCreatedLabelId: (state, action) => {\n      state.labels = state.labels.map(label => {\n        if (label._id === 'notUpdated') {\n          label._id = action.payload;\n        }\n\n        return label;\n      });\n    },\n    createChecklist: (state, action) => {\n      const {\n        _id,\n        title\n      } = action.payload;\n      state.checklists.push({\n        _id,\n        title,\n        items: []\n      });\n    },\n    updateCreatedChecklist: (state, action) => {\n      state.checklists = state.checklists.map(checklist => {\n        if (checklist._id === 'notUpdated') {\n          checklist._id = action.payload;\n        }\n\n        return checklist;\n      });\n    },\n    deleteChecklist: (state, action) => {\n      state.checklists = state.checklists.filter(list => list._id !== action.payload);\n    },\n    addChecklistItem: (state, action) => {\n      const {\n        checklistId,\n        _id,\n        text\n      } = action.payload;\n      state.checklists = state.checklists.map(list => {\n        if (list._id.toString() === checklistId.toString()) {\n          list.items.push({\n            _id: _id,\n            text: text,\n            completed: false\n          });\n        }\n\n        return list;\n      });\n    },\n    updateAddedChecklistItemId: (state, action) => {\n      const {\n        checklistId,\n        checklistItemId\n      } = action.payload;\n      state.checklists = state.checklists.map(list => {\n        if (list._id.toString() === checklistId.toString()) {\n          list.items[list.items.length - 1]._id = checklistItemId;\n        }\n\n        return list;\n      });\n    },\n    setChecklistItemCompleted: (state, action) => {\n      const {\n        checklistId,\n        checklistItemId,\n        completed\n      } = action.payload;\n      state.checklists = state.checklists.map(list => {\n        if (list._id.toString() === checklistId.toString()) {\n          list.items = list.items.map(item => {\n            if (item._id === checklistItemId) {\n              item.completed = completed;\n            }\n\n            return item;\n          });\n        }\n\n        return list;\n      });\n    },\n    setChecklistItemText: (state, action) => {\n      const {\n        checklistId,\n        checklistItemId,\n        text\n      } = action.payload;\n      state.checklists = state.checklists.map(list => {\n        if (list._id.toString() === checklistId.toString()) {\n          list.items = list.items.map(item => {\n            if (item._id === checklistItemId) {\n              item.text = text;\n            }\n\n            return item;\n          });\n        }\n\n        return list;\n      });\n    },\n    deleteChecklistItem: (state, action) => {\n      const {\n        checklistId,\n        checklistItemId\n      } = action.payload;\n      state.checklists = state.checklists.map(list => {\n        if (list._id.toString() === checklistId.toString()) {\n          list.items = list.items.filter(item => item._id !== checklistItemId);\n        }\n\n        return list;\n      });\n    },\n    updateStartDueDates: (state, action) => {\n      const {\n        startDate,\n        dueDate,\n        dueTime\n      } = action.payload;\n      state.date.startDate = startDate;\n      state.date.dueDate = dueDate;\n      state.date.dueTime = dueTime;\n      if (dueDate === null) state.date.completed = false;\n    },\n    updateDateCompleted: (state, action) => {\n      state.date.completed = action.payload;\n    },\n    addAttachment: (state, action) => {\n      const {\n        link,\n        name,\n        _id,\n        date\n      } = action.payload;\n      state.attachments.push({\n        link: link,\n        name: name,\n        _id: _id,\n        date: date\n      });\n    },\n    updateAddedAttachmentId: (state, action) => {\n      state.attachments = state.attachments.map(attachment => {\n        if (attachment._id === 'notUpdated') {\n          attachment._id = action.payload;\n        }\n\n        return attachment;\n      });\n    },\n    deleteAttachment: (state, action) => {\n      state.attachments = state.attachments.filter(attachment => attachment._id !== action.payload);\n    },\n    updateAttachment: (state, action) => {\n      const {\n        attachmentId,\n        link,\n        name\n      } = action.payload;\n      state.attachments = state.attachments.map(attachment => {\n        if (attachment._id === attachmentId) {\n          attachment.link = link;\n          attachment.name = name;\n        }\n\n        return attachment;\n      });\n    },\n    updateCover: (state, action) => {\n      const {\n        color,\n        isSizeOne\n      } = action.payload;\n      state.cover.color = color;\n      state.cover.isSizeOne = isSizeOne;\n    }\n  }\n});\nexport const {\n  reset,\n  setPending,\n  setCard,\n  updateTitle,\n  updateDescription,\n  addComment,\n  updateComment,\n  deleteComment,\n  addMember,\n  deleteMember,\n  createLabel,\n  updateLabel,\n  deleteLabel,\n  updateLabelSelection,\n  updateCreatedLabelId,\n  createChecklist,\n  updateCreatedChecklist,\n  deleteChecklist,\n  addChecklistItem,\n  updateAddedChecklistItemId,\n  setChecklistItemCompleted,\n  setChecklistItemText,\n  deleteChecklistItem,\n  updateStartDueDates,\n  updateDateCompleted,\n  addAttachment,\n  updateAddedAttachmentId,\n  deleteAttachment,\n  updateAttachment,\n  updateCover\n} = cardsSlice.actions;\nexport default cardsSlice.reducer;","map":{"version":3,"sources":["C:/Users/Dell/trello-clone-mern/client/src/Redux/Slices/cardSlice.js"],"names":["createSlice","initialState","cardId","title","labels","members","watchers","activities","checklists","owner","description","date","startDate","dueDate","dueTime","completed","attachments","cover","color","isSizeOne","colors","bg","hbg","pending","cardsSlice","name","reducers","reset","state","setPending","action","payload","setCard","_id","listTitle","listId","boardId","updateTitle","updateDescription","addComment","updateComment","commentId","text","map","activity","deleteComment","filter","act","addMember","memberId","memberName","memberColor","unshift","user","deleteMember","member","createLabel","backColor","selected","updateLabel","labelId","label","deleteLabel","updateLabelSelection","updateCreatedLabelId","createChecklist","push","items","updateCreatedChecklist","checklist","deleteChecklist","list","addChecklistItem","checklistId","toString","updateAddedChecklistItemId","checklistItemId","length","setChecklistItemCompleted","item","setChecklistItemText","deleteChecklistItem","updateStartDueDates","updateDateCompleted","addAttachment","link","updateAddedAttachmentId","attachment","deleteAttachment","updateAttachment","attachmentId","updateCover","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n\tcardId: '',\r\n\ttitle: '',\r\n\tlabels: [],\r\n\tmembers: [],\r\n\twatchers: [],\r\n\tactivities: [],\r\n\tchecklists: [],\r\n\towner: '',\r\n\tdescription: '',\r\n\tdate: {\r\n\t\tstartDate: null,\r\n\t\tdueDate: null,\r\n\t\tdueTime: null,\r\n\t\tcompleted: false,\r\n\t},\r\n\tattachments: [],\r\n\tcover: {\r\n\t\tcolor: null,\r\n\t\tisSizeOne: null,\r\n\t},\r\n\tcolors: [\r\n\t\t{ bg: '#61bd4f', hbg: '#519839' },\r\n\t\t{ bg: '#f2d600', hbg: '#d9b51c' },\r\n\t\t{ bg: '#ff9f1a', hbg: '#cd8313' },\r\n\t\t{ bg: '#eb5a46', hbg: '#b04632' },\r\n\t\t{ bg: '#c377e0', hbg: '#89609e' },\r\n\t\t{ bg: '#0079bf', hbg: '#055a8c' },\r\n\t\t{ bg: '#344563', hbg: '#172b4d' },\r\n\t\t{ bg: '#ff78cb', hbg: '#c75bad' },\r\n\t],\r\n\tpending: false,\r\n};\r\n\r\nconst cardsSlice = createSlice({\r\n\tname: 'card',\r\n\tinitialState,\r\n\treducers: {\r\n\t\treset: (state) => initialState,\r\n\t\tsetPending: (state, action) => {\r\n\t\t\tstate.pending = action.payload;\r\n\t\t},\r\n\t\tsetCard: (state, action) => {\r\n\t\t\tstate.cardId = action.payload._id;\r\n\t\t\tstate.title = action.payload.title;\r\n\t\t\tstate.labels = action.payload.labels;\r\n\t\t\tstate.members = action.payload.members;\r\n\t\t\tstate.watchers = action.payload.watchers;\r\n\t\t\tstate.activities = action.payload.activities;\r\n\t\t\tstate.owner = action.payload.owner;\r\n\t\t\tstate.listTitle = action.payload.listTitle;\r\n\t\t\tstate.listId = action.payload.listId;\r\n\t\t\tstate.boardId = action.payload.boardId;\r\n\t\t\tstate.description = action.payload.description;\r\n\t\t\tstate.checklists = action.payload.checklists;\r\n\t\t\tstate.date = action.payload.date;\r\n\t\t\tstate.attachments = action.payload.attachments;\r\n\t\t\tstate.cover = action.payload.cover;\r\n\t\t},\r\n\t\tupdateTitle: (state, action) => {\r\n\t\t\tstate.title = action.payload;\r\n\t\t},\r\n\t\tupdateDescription: (state, action) => {\r\n\t\t\tstate.description = action.payload;\r\n\t\t},\r\n\t\taddComment: (state, action) => {\r\n\t\t\tstate.activities = action.payload;\r\n\t\t},\r\n\t\tupdateComment: (state, action) => {\r\n\t\t\tconst { commentId, text } = action.payload;\r\n\t\t\tstate.activities = state.activities.map((activity) => {\r\n\t\t\t\tif (activity._id === commentId) {\r\n\t\t\t\t\tactivity.text = text;\r\n\t\t\t\t}\r\n\t\t\t\treturn activity;\r\n\t\t\t});\r\n\t\t},\r\n\t\tdeleteComment: (state, action) => {\r\n\t\t\tstate.activities = state.activities.filter((act) => act._id !== action.payload);\r\n\t\t},\r\n\t\taddMember: (state, action) => {\r\n\t\t\tconst { memberId, memberName, memberColor } = action.payload;\r\n\t\t\tstate.members.unshift({ user: memberId, name: memberName, color: memberColor });\r\n\t\t},\r\n\t\tdeleteMember: (state, action) => {\r\n\t\t\tconst { memberId } = action.payload;\r\n\t\t\tstate.members = state.members.filter((member) => member.user !== memberId);\r\n\t\t},\r\n\t\tcreateLabel: (state, action) => {\r\n\t\t\tconst { _id, text, color, backColor } = action.payload;\r\n\t\t\tstate.labels.unshift({ _id, text, color, backColor, selected: true });\r\n\t\t},\r\n\t\tupdateLabel: (state, action) => {\r\n\t\t\tconst { labelId, text, color, backColor } = action.payload;\r\n\t\t\tstate.labels = state.labels.map((label) => {\r\n\t\t\t\tif (label._id === labelId) {\r\n\t\t\t\t\tlabel.text = text;\r\n\t\t\t\t\tlabel.color = color;\r\n\t\t\t\t\tlabel.backColor = backColor;\r\n\t\t\t\t}\r\n\t\t\t\treturn label;\r\n\t\t\t});\r\n\t\t},\r\n\t\tdeleteLabel: (state, action) => {\r\n\t\t\tstate.labels = state.labels.filter((label) => label._id !== action.payload);\r\n\t\t},\r\n\t\tupdateLabelSelection: (state, action) => {\r\n\t\t\tconst { labelId, selected } = action.payload;\r\n\t\t\tstate.labels = state.labels.map((label) => {\r\n\t\t\t\tif (label._id === labelId) {\r\n\t\t\t\t\tlabel.selected = selected;\r\n\t\t\t\t}\r\n\t\t\t\treturn label;\r\n\t\t\t});\r\n\t\t},\r\n\t\tupdateCreatedLabelId: (state, action) => {\r\n\t\t\tstate.labels = state.labels.map((label) => {\r\n\t\t\t\tif (label._id === 'notUpdated') {\r\n\t\t\t\t\tlabel._id = action.payload;\r\n\t\t\t\t}\r\n\t\t\t\treturn label;\r\n\t\t\t});\r\n\t\t},\r\n\t\tcreateChecklist: (state, action) => {\r\n\t\t\tconst { _id, title } = action.payload;\r\n\t\t\tstate.checklists.push({ _id, title, items: [] });\r\n\t\t},\r\n\t\tupdateCreatedChecklist: (state, action) => {\r\n\t\t\tstate.checklists = state.checklists.map((checklist) => {\r\n\t\t\t\tif (checklist._id === 'notUpdated') {\r\n\t\t\t\t\tchecklist._id = action.payload;\r\n\t\t\t\t}\r\n\t\t\t\treturn checklist;\r\n\t\t\t});\r\n\t\t},\r\n\t\tdeleteChecklist: (state, action) => {\r\n\t\t\tstate.checklists = state.checklists.filter((list) => list._id !== action.payload);\r\n\t\t},\r\n\t\taddChecklistItem: (state, action) => {\r\n\t\t\tconst { checklistId, _id, text } = action.payload;\r\n\t\t\tstate.checklists = state.checklists.map((list) => {\r\n\t\t\t\tif (list._id.toString() === checklistId.toString()) {\r\n\t\t\t\t\tlist.items.push({ _id: _id, text: text, completed: false });\r\n\t\t\t\t}\r\n\t\t\t\treturn list;\r\n\t\t\t});\r\n\t\t},\r\n\t\tupdateAddedChecklistItemId: (state, action) => {\r\n\t\t\tconst { checklistId, checklistItemId } = action.payload;\r\n\t\t\tstate.checklists = state.checklists.map((list) => {\r\n\t\t\t\tif (list._id.toString() === checklistId.toString()) {\r\n\t\t\t\t\tlist.items[list.items.length - 1]._id = checklistItemId;\r\n\t\t\t\t}\r\n\t\t\t\treturn list;\r\n\t\t\t});\r\n\t\t},\r\n\t\tsetChecklistItemCompleted: (state, action) => {\r\n\t\t\tconst { checklistId, checklistItemId, completed } = action.payload;\r\n\t\t\tstate.checklists = state.checklists.map((list) => {\r\n\t\t\t\tif (list._id.toString() === checklistId.toString()) {\r\n\t\t\t\t\tlist.items = list.items.map((item) => {\r\n\t\t\t\t\t\tif (item._id === checklistItemId) {\r\n\t\t\t\t\t\t\titem.completed = completed;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn list;\r\n\t\t\t});\r\n\t\t},\r\n\t\tsetChecklistItemText: (state, action) => {\r\n\t\t\tconst { checklistId, checklistItemId, text } = action.payload;\r\n\t\t\tstate.checklists = state.checklists.map((list) => {\r\n\t\t\t\tif (list._id.toString() === checklistId.toString()) {\r\n\t\t\t\t\tlist.items = list.items.map((item) => {\r\n\t\t\t\t\t\tif (item._id === checklistItemId) {\r\n\t\t\t\t\t\t\titem.text = text;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn item;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\treturn list;\r\n\t\t\t});\r\n\t\t},\r\n\t\tdeleteChecklistItem: (state, action) => {\r\n\t\t\tconst { checklistId, checklistItemId } = action.payload;\r\n\t\t\tstate.checklists = state.checklists.map((list) => {\r\n\t\t\t\tif (list._id.toString() === checklistId.toString()) {\r\n\t\t\t\t\tlist.items = list.items.filter((item) => item._id !== checklistItemId);\r\n\t\t\t\t}\r\n\t\t\t\treturn list;\r\n\t\t\t});\r\n\t\t},\r\n\t\tupdateStartDueDates: (state, action) => {\r\n\t\t\tconst { startDate, dueDate, dueTime } = action.payload;\r\n\t\t\tstate.date.startDate = startDate;\r\n\t\t\tstate.date.dueDate = dueDate;\r\n\t\t\tstate.date.dueTime = dueTime;\r\n\t\t\tif (dueDate === null) state.date.completed = false;\r\n\t\t},\r\n\t\tupdateDateCompleted: (state, action) => {\r\n\t\t\tstate.date.completed = action.payload;\r\n\t\t},\r\n\t\taddAttachment: (state, action) => {\r\n\t\t\tconst { link, name, _id,date } = action.payload;\r\n\t\t\tstate.attachments.push({ link: link, name: name, _id:_id, date: date });\r\n\t\t},\r\n\t\tupdateAddedAttachmentId: (state, action) => {\r\n\t\t\tstate.attachments = state.attachments.map(attachment =>{\r\n\t\t\t\tif(attachment._id === 'notUpdated'){\r\n\t\t\t\t\tattachment._id = action.payload;\r\n\t\t\t\t}\r\n\t\t\t\treturn attachment;\r\n\t\t\t})\r\n\t\t},\r\n\t\tdeleteAttachment: (state, action) => {\r\n\t\t\tstate.attachments = state.attachments.filter((attachment) => attachment._id !== action.payload);\r\n\t\t},\r\n\t\tupdateAttachment: (state,action) => {\r\n\t\t\tconst {attachmentId, link, name} = action.payload;\r\n\t\t\tstate.attachments = state.attachments.map(attachment =>{\r\n\t\t\t\tif(attachment._id === attachmentId){\r\n\t\t\t\t\tattachment.link = link;\r\n\t\t\t\t\tattachment.name = name;\r\n\t\t\t\t}\r\n\t\t\t\treturn attachment;\r\n\t\t\t})\r\n\t\t},\r\n\t\tupdateCover: (state, action) => {\r\n\t\t\tconst {color, isSizeOne} = action.payload;\r\n\t\t\tstate.cover.color = color;\r\n\t\t\tstate.cover.isSizeOne = isSizeOne;\r\n\t\t},\r\n\t},\r\n});\r\n\r\nexport const {\r\n\treset,\r\n\tsetPending,\r\n\tsetCard,\r\n\tupdateTitle,\r\n\tupdateDescription,\r\n\taddComment,\r\n\tupdateComment,\r\n\tdeleteComment,\r\n\taddMember,\r\n\tdeleteMember,\r\n\tcreateLabel,\r\n\tupdateLabel,\r\n\tdeleteLabel,\r\n\tupdateLabelSelection,\r\n\tupdateCreatedLabelId,\r\n\tcreateChecklist,\r\n\tupdateCreatedChecklist,\r\n\tdeleteChecklist,\r\n\taddChecklistItem,\r\n\tupdateAddedChecklistItemId,\r\n\tsetChecklistItemCompleted,\r\n\tsetChecklistItemText,\r\n\tdeleteChecklistItem,\r\n\tupdateStartDueDates,\r\n\tupdateDateCompleted,\r\n\taddAttachment,\r\n\tupdateAddedAttachmentId,\r\n\tdeleteAttachment,\r\n\tupdateAttachment,\r\n\tupdateCover,\r\n} = cardsSlice.actions;\r\nexport default cardsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}