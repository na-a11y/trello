{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\trello-clone-mern\\\\client\\\\src\\\\Components\\\\Modals\\\\CreateBoardModal\\\\CreateBoard.js\",\n    _s = $RefreshSig$();\n\nimport * as React from \"react\";\nimport Modal from \"@mui/material/Modal\";\nimport * as style from \"./Styled\";\nimport PhotoCardComponent from \"./PhotoCardComponent\";\nimport TitleCardComponent from \"./TitleCardComponent\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createBoard } from \"../../../Services/boardsService\";\nimport LoadingScreen from \"../../LoadingScreen\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateBoard(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const creating = useSelector(state => state.boards.creating);\n  const {\n    backgroundImages,\n    smallPostfix\n  } = useSelector(state => state.boards);\n  const [open, setOpen] = React.useState(true);\n  const [background, setBackground] = React.useState(backgroundImages[0] + smallPostfix);\n  let newBoard = {};\n\n  const handleClick = async () => {\n    await createBoard(newBoard, dispatch);\n    props.callback();\n    setBackground(backgroundImages[0] + smallPostfix);\n  };\n\n  const handleSelect = link => {\n    setBackground(link);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    props.callback();\n  };\n\n  const handleUpdate = updatedBoard => {\n    newBoard = { ...updatedBoard\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [creating && /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: handleClose,\n      disableEnforceFocus: true,\n      children: /*#__PURE__*/_jsxDEV(style.Container, {\n        children: [/*#__PURE__*/_jsxDEV(style.Wrapper, {\n          children: [/*#__PURE__*/_jsxDEV(TitleCardComponent, {\n            link: background,\n            updateback: handleUpdate,\n            callback: handleClose\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(style.PhotosCard, {\n            children: backgroundImages.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(PhotoCardComponent, {\n                selectedLink: background,\n                link: item + smallPostfix,\n                callback: handleSelect\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(style.CreateButton, {\n          onClick: () => handleClick(),\n          children: \"Create Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateBoard, \"qdcLCrAOCNekeVSU2UddwkIVysM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CreateBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateBoard\");","map":{"version":3,"sources":["C:/Users/Dell/trello-clone-mern/client/src/Components/Modals/CreateBoardModal/CreateBoard.js"],"names":["React","Modal","style","PhotoCardComponent","TitleCardComponent","useDispatch","useSelector","createBoard","LoadingScreen","CreateBoard","props","dispatch","creating","state","boards","backgroundImages","smallPostfix","open","setOpen","useState","background","setBackground","newBoard","handleClick","callback","handleSelect","link","handleClose","handleUpdate","updatedBoard","position","map","item","index"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport * as style from \"./Styled\";\r\n\r\nimport PhotoCardComponent from \"./PhotoCardComponent\";\r\nimport TitleCardComponent from \"./TitleCardComponent\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createBoard } from \"../../../Services/boardsService\";\r\nimport LoadingScreen from \"../../LoadingScreen\";\r\n\r\nexport default function CreateBoard(props) {\r\n  const dispatch = useDispatch();\r\n  const creating = useSelector((state) => state.boards.creating);\r\n  const { backgroundImages, smallPostfix } = useSelector(\r\n    (state) => state.boards\r\n  );\r\n\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const [background, setBackground] = React.useState(\r\n    backgroundImages[0] + smallPostfix\r\n  );\r\n\r\n  let newBoard = {};\r\n\r\n  const handleClick = async () => {\r\n    await createBoard(newBoard, dispatch);\r\n    props.callback();\r\n    setBackground(backgroundImages[0] + smallPostfix);\r\n  };\r\n\r\n  const handleSelect = (link) => {\r\n    setBackground(link);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    props.callback();\r\n  };\r\n\r\n  const handleUpdate = (updatedBoard) => {\r\n    newBoard = { ...updatedBoard };\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: \"relative\" }}>\r\n      {creating && <LoadingScreen />}\r\n      <Modal open={open} onClose={handleClose} disableEnforceFocus>\r\n        <style.Container>\r\n          <style.Wrapper>\r\n            <TitleCardComponent\r\n              link={background}\r\n              updateback={handleUpdate}\r\n              callback={handleClose}\r\n            />\r\n            <style.PhotosCard>\r\n              {backgroundImages.map((item, index) => {\r\n                return (\r\n                  <PhotoCardComponent\r\n                    key={index}\r\n                    selectedLink={background}\r\n                    link={item + smallPostfix}\r\n                    callback={handleSelect}\r\n                  />\r\n                );\r\n              })}\r\n            </style.PhotosCard>\r\n          </style.Wrapper>\r\n          <style.CreateButton onClick={() => handleClick()}>\r\n            Create Board\r\n          </style.CreateButton>\r\n        </style.Container>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}