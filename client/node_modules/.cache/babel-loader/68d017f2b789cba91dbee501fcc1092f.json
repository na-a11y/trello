{"ast":null,"code":"import axios from 'axios';\nimport { openAlert } from '../Redux/Slices/alertSlice';\nimport { setLoading, successCreatingCard, deleteCard } from '../Redux/Slices/listSlice';\nconst baseUrl = 'https://trello-mern-backend.onrender.com/card';\nexport const createCard = async (title, listId, boardId, dispatch) => {\n  dispatch(setLoading(true));\n\n  try {\n    const updatedList = await axios.post(baseUrl + '/create', {\n      title: title,\n      listId: listId,\n      boardId: boardId\n    });\n    dispatch(successCreatingCard({\n      listId: listId,\n      updatedList: updatedList.data\n    }));\n    dispatch(setLoading(false));\n  } catch (error) {\n    var _error$response, _error$response$data;\n\n    dispatch(setLoading(false));\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: 'error'\n    }));\n  }\n};\nexport const cardDelete = async (listId, boardId, cardId, dispatch) => {\n  try {\n    await dispatch(deleteCard({\n      listId,\n      cardId\n    }));\n    await axios.delete(baseUrl + \"/\" + boardId + \"/\" + listId + \"/\" + cardId + \"/delete-card\");\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: 'error'\n    }));\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/trello-clone-mern/client/src/Services/listService.js"],"names":["axios","openAlert","setLoading","successCreatingCard","deleteCard","baseUrl","createCard","title","listId","boardId","dispatch","updatedList","post","data","error","message","response","errMessage","severity","cardDelete","cardId","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,UAAT,EAAqBC,mBAArB,EAAyCC,UAAzC,QAA2D,2BAA3D;AAEA,MAAMC,OAAO,GAAG,+CAAhB;AAEA,OAAO,MAAMC,UAAU,GAAG,OAAOC,KAAP,EAAcC,MAAd,EAAsBC,OAAtB,EAA+BC,QAA/B,KAA4C;AACrEA,EAAAA,QAAQ,CAACR,UAAU,CAAC,IAAD,CAAX,CAAR;;AACA,MAAI;AACH,UAAMS,WAAW,GAAG,MAAMX,KAAK,CAACY,IAAN,CAAWP,OAAO,GAAG,SAArB,EAAgC;AAAEE,MAAAA,KAAK,EAAEA,KAAT;AAAgBC,MAAAA,MAAM,EAAEA,MAAxB;AAAgCC,MAAAA,OAAO,EAAEA;AAAzC,KAAhC,CAA1B;AACAC,IAAAA,QAAQ,CAACP,mBAAmB,CAAC;AAAEK,MAAAA,MAAM,EAAEA,MAAV;AAAkBG,MAAAA,WAAW,EAAEA,WAAW,CAACE;AAA3C,KAAD,CAApB,CAAR;AACAH,IAAAA,QAAQ,CAACR,UAAU,CAAC,KAAD,CAAX,CAAR;AACA,GAJD,CAIE,OAAOY,KAAP,EAAc;AAAA;;AACfJ,IAAAA,QAAQ,CAACR,UAAU,CAAC,KAAD,CAAX,CAAR;AACAQ,IAAAA,QAAQ,CACPT,SAAS,CAAC;AACTc,MAAAA,OAAO,EAAE,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,+BAAAA,KAAK,CAAEE,QAAP,4FAAiBH,IAAjB,8EAAuBI,UAAvB,IAAoCH,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,UAAxD,GAAqEH,KAAK,CAACC,OAD3E;AAETG,MAAAA,QAAQ,EAAE;AAFD,KAAD,CADF,CAAR;AAMA;AACD,CAfM;AAiBP,OAAO,MAAMC,UAAU,GAAG,OAAMX,MAAN,EAAaC,OAAb,EAAqBW,MAArB,EAA4BV,QAA5B,KAAuC;AAChE,MAAI;AACH,UAAMA,QAAQ,CAACN,UAAU,CAAC;AAACI,MAAAA,MAAD;AAAQY,MAAAA;AAAR,KAAD,CAAX,CAAd;AACA,UAAMpB,KAAK,CAACqB,MAAN,CAAahB,OAAO,GAAG,GAAV,GAAcI,OAAd,GAAsB,GAAtB,GAA0BD,MAA1B,GAAmC,GAAnC,GAAyCY,MAAzC,GAAiD,cAA9D,CAAN;AACA,GAHD,CAGE,OAAON,KAAP,EAAc;AAAA;;AACfJ,IAAAA,QAAQ,CACPT,SAAS,CAAC;AACTc,MAAAA,OAAO,EAAE,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,gCAAAA,KAAK,CAAEE,QAAP,+FAAiBH,IAAjB,gFAAuBI,UAAvB,IAAoCH,KAAK,CAACE,QAAN,CAAeH,IAAf,CAAoBI,UAAxD,GAAqEH,KAAK,CAACC,OAD3E;AAETG,MAAAA,QAAQ,EAAE;AAFD,KAAD,CADF,CAAR;AAMA;AACD,CAZM","sourcesContent":["import axios from 'axios';\r\nimport { openAlert } from '../Redux/Slices/alertSlice';\r\nimport { setLoading, successCreatingCard,deleteCard } from '../Redux/Slices/listSlice';\r\n\r\nconst baseUrl = 'https://trello-mern-backend.onrender.com/card';\r\n\r\nexport const createCard = async (title, listId, boardId, dispatch) => {\r\n\tdispatch(setLoading(true));\r\n\ttry {\r\n\t\tconst updatedList = await axios.post(baseUrl + '/create', { title: title, listId: listId, boardId: boardId });\r\n\t\tdispatch(successCreatingCard({ listId: listId, updatedList: updatedList.data }));\r\n\t\tdispatch(setLoading(false));\r\n\t} catch (error) {\r\n\t\tdispatch(setLoading(false));\r\n\t\tdispatch(\r\n\t\t\topenAlert({\r\n\t\t\t\tmessage: error?.response?.data?.errMessage ? error.response.data.errMessage : error.message,\r\n\t\t\t\tseverity: 'error',\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport const cardDelete = async(listId,boardId,cardId,dispatch)=>{\r\n\ttry {\r\n\t\tawait dispatch(deleteCard({listId,cardId}));\r\n\t\tawait axios.delete(baseUrl + \"/\"+boardId+\"/\"+listId + \"/\" + cardId+ \"/delete-card\");\r\n\t} catch (error) {\r\n\t\tdispatch(\r\n\t\t\topenAlert({\r\n\t\t\t\tmessage: error?.response?.data?.errMessage ? error.response.data.errMessage : error.message,\r\n\t\t\t\tseverity: 'error',\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}