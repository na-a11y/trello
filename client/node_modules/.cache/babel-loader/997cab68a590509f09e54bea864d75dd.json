{"ast":null,"code":"import axios from \"axios\";\nimport { registrationStart, registrationEnd, loginStart, loginFailure, loginSuccess, loadSuccess, loadFailure, loadStart, fetchingStart, fetchingFinish } from \"../Redux/Slices/userSlice\";\nimport { openAlert } from \"../Redux/Slices/alertSlice\";\nimport setBearer from \"../Utils/setBearer\";\nconst baseUrl = \"http://localhost:5001/user/\";\nexport const register = async (_ref, dispatch) => {\n  let {\n    name,\n    surname,\n    email,\n    password,\n    repassword\n  } = _ref;\n  dispatch(registrationStart());\n\n  if (password !== repassword) {\n    dispatch(openAlert({\n      message: \"Your passwords does not match!\",\n      severity: \"error\"\n    }));\n  } else {\n    try {\n      const res = await axios.post(`${baseUrl}register`, {\n        name,\n        surname,\n        email,\n        password\n      });\n      dispatch(openAlert({\n        message: res.data.message,\n        severity: \"success\",\n        nextRoute: \"/login\",\n        duration: 1500\n      }));\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      dispatch(openAlert({\n        message: (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errMessage) ? error.response.data.errMessage : error.message,\n        severity: \"error\"\n      }));\n    }\n  }\n\n  dispatch(registrationEnd());\n};\nexport const login = async (_ref2, dispatch) => {\n  let {\n    email,\n    password\n  } = _ref2;\n  dispatch(loginStart());\n\n  try {\n    const res = await axios.post(baseUrl + \"login\", {\n      email,\n      password\n    });\n    const {\n      user,\n      message\n    } = res.data;\n    localStorage.setItem(\"token\", user.token);\n    setBearer(user.token);\n    dispatch(loginSuccess({\n      user\n    }));\n    dispatch(openAlert({\n      message,\n      severity: \"success\",\n      duration: 500,\n      nextRoute: \"/boards\"\n    }));\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n\n    dispatch(loginFailure());\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: \"error\"\n    }));\n  }\n};\nexport const loadUser = async dispatch => {\n  dispatch(loadStart());\n  if (!localStorage.token) return dispatch(loadFailure());\n  setBearer(localStorage.token);\n\n  try {\n    const res = await axios.get(baseUrl + \"get-user\");\n    dispatch(loadSuccess({\n      user: res.data\n    }));\n  } catch (error) {\n    dispatch(loadFailure());\n  }\n};\nexport const getUserFromEmail = async (email, dispatch) => {\n  dispatch(fetchingStart());\n\n  if (!email) {\n    dispatch(openAlert({\n      message: \"Please write an email to invite\",\n      severity: \"warning\"\n    }));\n    dispatch(fetchingFinish());\n    return null;\n  }\n\n  try {\n    const res = await axios.post(baseUrl + \"get-user-with-email\", {\n      email\n    });\n    dispatch(fetchingFinish());\n    return res.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n\n    dispatch(openAlert({\n      message: (error === null || error === void 0 ? void 0 : (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.errMessage) ? error.response.data.errMessage : error.message,\n      severity: \"error\"\n    }));\n    dispatch(fetchingFinish());\n    return null;\n  }\n};","map":{"version":3,"sources":["C:/Users/Dell/trello-clone-mern/client/src/Services/userService.js"],"names":["axios","registrationStart","registrationEnd","loginStart","loginFailure","loginSuccess","loadSuccess","loadFailure","loadStart","fetchingStart","fetchingFinish","openAlert","setBearer","baseUrl","register","dispatch","name","surname","email","password","repassword","message","severity","res","post","data","nextRoute","duration","error","response","errMessage","login","user","localStorage","setItem","token","loadUser","get","getUserFromEmail"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  registrationStart,\r\n  registrationEnd,\r\n  loginStart,\r\n  loginFailure,\r\n  loginSuccess,\r\n  loadSuccess,\r\n  loadFailure,\r\n  loadStart,\r\n  fetchingStart,\r\n  fetchingFinish,\r\n} from \"../Redux/Slices/userSlice\";\r\nimport { openAlert } from \"../Redux/Slices/alertSlice\";\r\nimport setBearer from \"../Utils/setBearer\";\r\nconst baseUrl = \"http://localhost:5001/user/\";\r\n\r\nexport const register = async (\r\n  { name, surname, email, password, repassword },\r\n  dispatch\r\n) => {\r\n  dispatch(registrationStart());\r\n  if (password !== repassword) {\r\n    dispatch(\r\n      openAlert({\r\n        message: \"Your passwords does not match!\",\r\n        severity: \"error\",\r\n      })\r\n    );\r\n  } else {\r\n    try {\r\n      const res = await axios.post(`${baseUrl}register`, {\r\n        name,\r\n        surname,\r\n        email,\r\n        password,\r\n      });\r\n      dispatch(\r\n        openAlert({\r\n          message: res.data.message,\r\n          severity: \"success\",\r\n          nextRoute: \"/login\",\r\n          duration: 1500,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      dispatch(\r\n        openAlert({\r\n          message: error?.response?.data?.errMessage\r\n            ? error.response.data.errMessage\r\n            : error.message,\r\n          severity: \"error\",\r\n        })\r\n      );\r\n    }\r\n  }\r\n  dispatch(registrationEnd());\r\n};\r\n\r\nexport const login = async ({ email, password }, dispatch) => {\r\n  dispatch(loginStart());\r\n  try {\r\n    const res = await axios.post(baseUrl + \"login\", { email, password });\r\n    const { user, message } = res.data;\r\n    localStorage.setItem(\"token\", user.token);\r\n    setBearer(user.token);\r\n      dispatch(loginSuccess({ user }));\r\n    dispatch(\r\n      openAlert({\r\n        message,\r\n        severity: \"success\",\r\n        duration: 500,\r\n        nextRoute: \"/boards\",\r\n      })\r\n    );\r\n  } catch (error) {\r\n    dispatch(loginFailure());\r\n    dispatch(\r\n      openAlert({\r\n        message: error?.response?.data?.errMessage\r\n          ? error.response.data.errMessage\r\n          : error.message,\r\n        severity: \"error\",\r\n      })\r\n    );\r\n  }\r\n};\r\n\r\nexport const loadUser = async (dispatch) => {\r\n  dispatch(loadStart());\r\n  if (!localStorage.token) return dispatch(loadFailure());\r\n  setBearer(localStorage.token);\r\n  try {\r\n    const res = await axios.get(baseUrl + \"get-user\");\r\n    dispatch(loadSuccess({ user: res.data }));\r\n  } catch (error) {\r\n    dispatch(loadFailure());\r\n  }\r\n};\r\n\r\nexport const getUserFromEmail = async (email, dispatch) => {\r\n  dispatch(fetchingStart());\r\n  if (!email) {\r\n    dispatch(\r\n      openAlert({\r\n        message: \"Please write an email to invite\",\r\n        severity: \"warning\",\r\n      })\r\n      );\r\n      dispatch(fetchingFinish());\r\n      return null;\r\n    }\r\n    \r\n  try {\r\n    const res = await axios.post(baseUrl + \"get-user-with-email\", { email });\r\n    dispatch(fetchingFinish());\r\n    return res.data;\r\n  } catch (error) {\r\n    dispatch(\r\n      openAlert({\r\n        message: error?.response?.data?.errMessage\r\n        ? error.response.data.errMessage\r\n        : error.message,\r\n        severity: \"error\",\r\n      })\r\n      );\r\n     dispatch(fetchingFinish());\r\n     return null;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}